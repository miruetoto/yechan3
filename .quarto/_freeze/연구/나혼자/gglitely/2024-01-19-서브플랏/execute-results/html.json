{
  "hash": "f80acc376cf6e3aabb7c63e6ab9110ad",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"(연구) gglitely -- 서브플랏\"\nauthor: \"신록예찬\"\ndate: \"01/19/2024\"\nexecute: \n  enabled: true\n  cache: false\n  freeze: false\n  error: true\n---\n\n# Install \n\n::: {#0711ab18-0d7b-40c1-8030-61f643845746 .cell execution_count=1}\n``` {.python .cell-code}\n!pip uninstall gglitely -y\n!pip install git+https://github.com/seoyeonc/gglitely.git\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFound existing installation: gglitely 0.0.1\r\nUninstalling gglitely-0.0.1:\r\n  Successfully uninstalled gglitely-0.0.1\r\nCollecting git+https://github.com/seoyeonc/gglitely.git\r\n  Cloning https://github.com/seoyeonc/gglitely.git to /tmp/pip-req-build-ylhl91bb\r\n  Running command git clone --filter=blob:none --quiet https://github.com/seoyeonc/gglitely.git /tmp/pip-req-build-ylhl91bb\r\n  Resolved https://github.com/seoyeonc/gglitely.git to commit 86f5c00a4a8e40a05e5fdaa927296f50ff290b24\r\n  Preparing metadata (setup.py) ... -\b \bdone\r\nRequirement already satisfied: pandas in /home/cgb2/anaconda3/lib/python3.11/site-packages (from gglitely==0.0.1) (2.0.3)\r\nRequirement already satisfied: python-dateutil>=2.8.2 in /home/cgb2/anaconda3/lib/python3.11/site-packages (from pandas->gglitely==0.0.1) (2.8.2)\r\nRequirement already satisfied: pytz>=2020.1 in /home/cgb2/anaconda3/lib/python3.11/site-packages (from pandas->gglitely==0.0.1) (2023.3.post1)\r\nRequirement already satisfied: tzdata>=2022.1 in /home/cgb2/anaconda3/lib/python3.11/site-packages (from pandas->gglitely==0.0.1) (2023.3)\r\nRequirement already satisfied: numpy>=1.21.0 in /home/cgb2/anaconda3/lib/python3.11/site-packages (from pandas->gglitely==0.0.1) (1.24.3)\r\nRequirement already satisfied: six>=1.5 in /home/cgb2/anaconda3/lib/python3.11/site-packages (from python-dateutil>=2.8.2->pandas->gglitely==0.0.1) (1.16.0)\r\nBuilding wheels for collected packages: gglitely\r\n  Building wheel for gglitely (setup.py) ... -\b \b\\\b \bdone\r\n  Created wheel for gglitely: filename=gglitely-0.0.1-py3-none-any.whl size=2473 sha256=9de457b7439de1896b1325f712817fbb8f6819115d520a28423f938ecf36b9fe\r\n  Stored in directory: /tmp/pip-ephem-wheel-cache-81p4sq23/wheels/a5/b2/29/5db99646aa2b8d946b957bdf761a177612bf6709303d4ed579\r\nSuccessfully built gglitely\r\nInstalling collected packages: gglitely\r\nSuccessfully installed gglitely-0.0.1\r\n```\n:::\n:::\n\n\n# Imports \n\n::: {#cdf71d15-d794-47e5-8d40-24abe2bf5ad9 .cell execution_count=2}\n``` {.python .cell-code}\nfrom gglitely import *\n```\n:::\n\n\n::: {#b1c02072-957a-4426-90fe-87a44295cb69 .cell execution_count=3}\n``` {.python .cell-code}\nsubplot_count = lambda fig: len({geom[key] for geom in fig.data for key in geom if 'xaxis' in key})\ndef trace_axes_adjustment(fig1, fig2):\n    x_axes_fig1 = sorted([key for key in fig1.layout if 'xaxis' in key])\n    y_axes_fig1 = sorted([key for key in fig1.layout if 'yaxis' in key])\n    x_axes_fig2 = sorted([key for key in fig2.layout if 'xaxis' in key])\n    y_axes_fig2 = sorted([key for key in fig2.layout if 'yaxis' in key])    \n    for trace in fig1.data:\n        if trace['xaxis'] is None:\n            for i, (x, y) in enumerate(zip(x_axes_fig1, y_axes_fig1), start=1):\n                trace['xaxis'] = f'x{i}'\n                trace['yaxis'] = f'y{i}'\n    for trace in fig2.data:\n        if trace['xaxis'] is None:\n            for i, (x, y) in enumerate(zip(x_axes_fig2, y_axes_fig2), start=1):\n                trace['xaxis'] = f'x{i + subplot_count(fig1)}'\n                trace['yaxis'] = f'y{i + subplot_count(fig1)}'\n        else:\n            if trace['xaxis'] == 'x':\n                trace['xaxis'] = f'x{1 + subplot_count(fig1)}'\n            else:\n                axis_num = int(trace['xaxis'][-1]) + subplot_count(fig1)\n                trace['xaxis'] = f'x{axis_num}'\n\n            if trace['yaxis'] == 'y':\n                trace['yaxis'] = f'y{1 + subplot_count(fig1)}'\n            else:\n                axis_num = int(trace['yaxis'][-1]) + subplot_count(fig1)\n                trace['yaxis'] = f'y{axis_num}'\n    return fig1, fig2\n\ndef clayout_adjustment(fig1, fig2):\n    # Loop through fig1 and fig2\n    for f in [fig1, fig2]:\n        # Extract all xaxes and yaxes\n        xaxes = [geom[key] for geom in f.data for key in geom if 'xaxis' in key]\n        yaxes = [geom[key] for geom in f.data for key in geom if 'yaxis' in key]\n        # Check if all traces in the figure share the same xaxis (i.e., there is only one subplot)\n        if len(set(xaxes)) == 1:\n            for i, (x, y) in enumerate(zip(xaxes, yaxes), start=1):\n                # Update xaxis layout\n                f.layout[x.replace('x', 'xaxis')] = {'anchor': x.replace('axis', ''), 'domain': [0.0, 1.0]}\n                # Update yaxis layout\n                f.layout[y.replace('y', 'yaxis')] = {'anchor': y.replace('axis', ''), 'domain': [0.0, 1.0]}\n        else:\n            pass  # Do nothing if xaxes are not the same\n    return fig1, fig2\n\n    \ndef cbind(fig1,fig2,column_widths=None):\n    # Update data and layout for fig1 and fig2\n    fig1 = gglitely(data=fig1.data, layout=fig1.layout)\n    fig2 = gglitely(data=fig2.data, layout=fig2.layout)\n    \n    # Calculate the number of subplots\n    n1 = subplot_count(fig1)\n    n2 = subplot_count(fig2)\n    \n    # Adjust trace axes\n    fig1, fig2 = trace_axes_adjustment(fig1, fig2)\n    \n    # Adjust layout\n    fig1, fig2 = clayout_adjustment(fig1, fig2)\n    \n    # Set column widths if not provided\n    if column_widths is None:\n        column_widths = [1] * n1 + [1] * n2\n    \n    # Create subplots\n    fig = make_subplots(rows=1, cols=n1 + n2, column_widths=column_widths)\n    fig = gglitely(layout=fig.layout)\n    \n    # Add traces from fig1 and fig2\n    fig.add_traces(fig1.data)\n    fig.add_traces(fig2.data)\n    \n    # Increment ncols\n    fig._ncols += 1\n    return fig\n```\n:::\n\n\n# 서브플랏 \n\n::: {#d6777a09-3e0e-47dd-80f2-156f7ab06fce .cell execution_count=4}\n``` {.python .cell-code}\nfig1 = gglitely() + bar(y=[1,2,3],col='red') + bar(y=[2,3,1],col='blue')\nfig2 = gglitely() + bar(y=[2,3,1],alpha=0.7,col='blue')\n```\n:::\n\n\n::: {#d463d336-684a-43f7-b875-c5d27dbbe3d6 .cell execution_count=5}\n``` {.python .cell-code}\ncbind(cbind(cbind(fig1,fig2),fig1),fig2)\n```\n\n::: {.cell-output .cell-output-error}\n```\nAttributeError: 'gglitely' object has no attribute '_ncols'\n```\n:::\n:::\n\n\n",
    "supporting": [
      "2024-01-19-서브플랏_files"
    ],
    "filters": [],
    "includes": {}
  }
}